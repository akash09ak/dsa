
#include<iostream>
using namespace std;
struct BTnode
{
 int data;
 struct BTnode* left;
 struct BTnode* right;
};
class BinaryTree
{
 public:
 struct BTnode* root=new BTnode;

 int level=0; //level number starts from 0

 BinaryTree()
 {
 root=NULL;
 }

 void insert(struct BTnode*);
 struct BTnode* del(struct BTnode*,int);
 bool search(struct BTnode*,int);
 void DFSTraversal(struct BTnode*,int);
 struct BTnode* getmin(struct BTnode*);
 struct BTnode* getmax(struct BTnode*);
 int getleaves(struct BTnode*);
 int getheight(struct BTnode*);
 void mirrorImage(struct BTnode*);

 ~BinaryTree()
 {
 delete root;
 }
};
void BinaryTree::insert(struct BTnode* newnode)
{
 char ch;
 struct BTnode* p,*dummy;
 if(root==NULL)
 {
 root=newnode;
 cout<<"\nroot : "<<root->data;
 }
 else
 {
 dummy=root;

 while(dummy!=NULL)
 {
 p=dummy;

 if(newnode->data<dummy->data)
 {
 dummy=dummy->left;
 ch='l';
 }
 else //if(newnode->data>dummy->data)
 {
 dummy=dummy->right;
 ch='r';
 }
 }
 if(ch=='l')
 {
 p->left=newnode;
 cout<<"\nparent : "<<p->data;
 if(p->left)
 cout<<"\nleft : "<<p->left->data;
 if(p->right)
 cout<<"\nright : "<<p->right->data;
 }

 else
 {
 p->right=newnode;
 cout<<"\nparent : "<<p->data;
 if(p->left)
 cout<<"\nleft : "<<p->left->data;
 if(p->right)
 cout<<"\nright : "<<p->right->data;
 }

 }
}
struct BTnode* BinaryTree::del(struct BTnode* t, int val)
{
 if(t==NULL) return t;
 else if(t->data>val) t->left = del(t->left,val);
 else if(t->data<val) t->right = del(t->right,val);
 else
 {
 struct BTnode* temp = NULL;

 //CASE 1 : node to be deleted has no child
 if(t->left==NULL && t->right==NULL)
 {
 temp=t;
 cout<<temp->data<<" has been deleted successfully";
 delete t;
 t=NULL;
 }

 //CASE 2 : node to be deleted has one child only
 else if(t->left==NULL)
 {
 temp=t;
 t=t->right;
 cout<<temp->data<<" has been deleted successfully";
 delete temp;
 }

 else if(t->right==NULL)
 {
 temp=t;
 t=t->left;
 cout<<temp->data<<" has been deleted successfully";
 delete temp;
 }

 //CASE 3 : node to be deleted has 2 children
 else
 {
 temp=getmin(t->right);
 t->data=temp->data;
 t->right = del(t->right,temp->data);

 }
 }
 return t;
}
bool BinaryTree::search(struct BTnode* t,int val)
{
 //level number starts from 0
 if(t)
 {
 if(t->data==val)
 {
 return 1;
 }
 else if(t->data>val)
 {
 level++;
 return search(t->left,val);
 }
 else if(t->data<val)
 {
 level++;
 return search(t->right,val);
 }
 }
 else
 return 0;

}
void BinaryTree::DFSTraversal(struct BTnode* t,int ch)
{
 if(t)
 {
 if(ch==1) //PREORDER
 {
 cout<<"=="<<t->data;
 DFSTraversal(t->left,1);
 DFSTraversal(t->right,1);
 }
 else if(ch==2) //INORDER
 {
 DFSTraversal(t->left,2);
 cout<<"=="<<t->data;
 DFSTraversal(t->right,2);
 }
 else if(ch==3) //POSTORDER
 {
 DFSTraversal(t->left,3);
 DFSTraversal(t->right,3);
 cout<<"=="<<t->data;
 }
 }
}
struct BTnode* BinaryTree::getmin(struct BTnode* t)
{
 if(!t) return NULL;

 if(!(t->left))
 return t;
 else
 getmin(t->left);
}
struct BTnode* BinaryTree::getmax(struct BTnode* t)
{
 if(!t) return NULL;

 while(t->right!=NULL)
 {
 t=t->right;
 }
 return t;
}
int BinaryTree::getleaves(struct BTnode* t)
{
 int val=0;
 if(t)
 {
 if(t->left==NULL && t->right==NULL)
 val=1;
 else
 val=val+getleaves(t->left)+getleaves(t->right);
 }
 //else : Empty tree i.e. no leaf nodes, so val=0 implicitly
 return val;

}
int BinaryTree::getheight(struct BTnode* t)
{
 if(!t) return -1;

 int lh=getheight(t->left);
 int rh=getheight(t->right);

 if(lh>rh)return lh+1;
 else return rh+1;

}
void BinaryTree::mirrorImage(struct BTnode* t)
{
 struct BTnode* temp=NULL;
 if(t)
 {
 mirrorImage(t->left);
 mirrorImage(t->right);

 temp=t->left;
 t->left=t->right;
 t->right=temp;

 }
}
int main()
{
 BinaryTree *b = new BinaryTree;
 char subtree;
 struct BTnode* node;
 struct BTnode *temp1=NULL;
 int opt1,opt2,value,n;

 do
{
 cout<<"\n\n*********************************";
 cout<<"\n Implementation of BST ";
 cout<<"\n*********************************";
 cout<<"\nMenu to perform opertions on BST";
 cout<<"\n1. create\n2. delete\n3. search\n4. DFS traversal\n5. Find minimum value\n6.Find maximum value\n7. Count number of leaf/pendant/external nodes\n8. Find height\n9. Find number of levels\n10. Get mirror image\n11. Exit";
 cout<<"\nEnter your choice : ";
 cin>>opt1;

 switch(opt1)
 {
 case 1:
 cout<<"\nEnter the number of nodes/data elements to be stored as a BST : ";
 cin>>n;

 for(int i=0;i<n;i++)
 {
 node=new BTnode;
 cout<<"\n\nEnter data : ";
 cin>>node->data;
 node->left=NULL;
 node->right=NULL;
 b->insert(node);
 }
 break;

 case 2:
 cout<<"\nEnter value to be deleted : ";
 cin>>value;
 b->root=b->del(b->root,value);
 break;

 case 3:
 if(b->root)
 {
 cout<<"\nEnter value to be searched : ";
 cin>>value;
 if(b->search(b->root,value))
 {
 cout<<value<<" found in the BST at level number "<<b->level<<" in the " ;
 if(b->root->data>value) subtree='l';
 else subtree='r';
 if(subtree=='l') cout<<"left subtree of the root";
 else cout<<"right subtree of the root";
 }
 else
 {
 cout<<value<<" not found in the BST";
 }
 b->level=0;
 }
 else
 {
 cout<<"\nBST does not exist";
 }
 break;

 case 4:
 if(!b->root)
 cout<<"\nBST does not exist";
 else
 {
 repeat1:
 cout<<"\nSelect any one DFS traversal : ";
 cout<<"1. Preorder\n2. Inorder\n3. Postorder";
 cout<<"\nEnter your choice (1/2/3) : ";
 cin>>opt2;
 if(opt2==1)
 {
 cout<<"\nPreorder Traversal is : \n";
 b->DFSTraversal(b->root,1);
 }
 else if(opt2==2)
 {
 cout<<"\nInorder Traversal is : \n";
 b->DFSTraversal(b->root,2);
 }
 else if(opt2==3)
 {
 cout<<"\nPostorder Traversal is : \n";
 b->DFSTraversal(b->root,3);
 }
 else
 {
 cout<<"\nInvalid option. Please re-enter your choice";
 goto repeat1;
 }
 }
 break;

 case 5:
 temp1 = b->getmin(b->root);
 cout<<"\nMinimum value in BST is : "<<temp1->data;
 break;

 case 6:
 temp1 = b->getmax(b->root);
 cout<<"\nMaximum value in BST is : "<<temp1->data;
 break;

 case 7:
 cout<<"Number of leaf/pendant/external nodes is : "<<b->getleaves(b->root);
 break;

 case 8:
 cout<<"Heigth of BST is : "<<b->getheight(b->root);
 break;

 case 9:
 cout<<"Number of levels in BST is : "<<b->getheight(b->root)+1;
 break;

 case 10:
 b->mirrorImage(b->root);
 cout<<"DFS Inorder trversal of the mirror image of the BST is : \n";
 b->DFSTraversal(b->root,2);
 b->mirrorImage(b->root);
 break;

 case 11:
 delete b;
 exit(0);

 default:
 cout<<"Wrong choice !"<<endl;
 break;
}
}while(1);
 return 0;
} 
 OUTPUT::
/tmp/cux0htz6Nf.o
*********************************
Implementation of BST 
*********************************
Menu to perform opertions on BST
1. create
2. delete
3. search
4. DFS traversal
5. Find minimum value
6.Find maximum value
7. Count number of leaf/pendant/external nodes
8. Find height
9. Find number of levels
10. Get mirror image
11. Exit
Enter your choice : 1
Enter the number of nodes/data elements to be stored as a BST : 5
Enter data : 50
root : 50

Enter data : 20
parent : 50
left : 20

Enter data : 34
parent : 20
right : 34

Enter data : 56
parent : 50
left : 20
right : 56

Enter data : 78
parent : 56
right : 78

*********************************
 Implementation of BST 
*********************************
Menu to perform opertions on BST
1. create
2. delete
3. search
4. DFS traversal
5. Find minimum value
6.Find maximum value
7. Count number of leaf/pendant/external nodes
8. Find height
9. Find number of levels
10. Get mirror image
11. Exit
Enter your choice : 
4
Select any one DFS traversal : 1. Preorder
2. Inorder
3. Postorder
Enter your choice (1/2/3) : 1
Preorder Traversal is : 
==50==20==34==56==78

*********************************
 Implementation of BST 
*********************************
Menu to perform opertions on BST
1. create
2. delete
3. search
4. DFS traversal
5. Find minimum value
6.Find maximum value
7. Count number of leaf/pendant/external nodes
8. Find height
9. Find number of levels
10. Get mirror image
11. Exit
Enter your choice : 
8
Heigth of BST is : 2

*********************************
 Implementation of BST 
*********************************
Menu to perform opertions on BST
1. create
2. delete
3. search
4. DFS traversal
5. Find minimum value
6.Find maximum value
7. Count number of leaf/pendant/external nodes
8. Find height
9. Find number of levels
10. Get mirror image
11. Exit
Enter your choice : 
10
DFS Inorder trversal of the mirror image of the BST is : 
==78==56==50==34==20

*********************************
 Implementation of BST 
*********************************
Menu to perform opertions on BST
1. create
2. delete
3. search
4. DFS traversal
5. Find minimum value
6.Find maximum value
7. Count number of leaf/pendant/external nodes
8. Find height
9. Find number of levels
10. Get mirror image
11. Exit
Enter your choice : 
11
-------------------------------- 
Process exited after 180.9 seconds with return value 1 
Press any key to continue . . . 


